__author__ = 'mason'
from domain_orderFulfillment import *
from timer import DURATION
from state import state
import numpy as np

def GetCostOfMove(id, r, loc1, loc2, dist):
    return 1 + dist

def GetCostOfLookup(id, item):
    return max(1, np.random.beta(2, 2))

def GetCostOfWrap(id, m, item):
    return max(1, np.random.normal(5, .5))

def GetCostOfPickup(id, r, item):
    return max(1, np.random.normal(4, 1))

def GetCostOfPutdown(id, r, item):
    return max(1, np.random.normal(4, 1))

def GetCostOfLoad(id, r, m, item):
    return max(1, np.random.normal(3, .5))

DURATION.TIME = {
    'lookupDB': GetCostOfLookup,
    'wrap': GetCostOfWrap,
    'pickup': GetCostOfPickup,
    'putdown': GetCostOfPutdown,
    'acquireRobot': 1,
    'freeRobot': 1,
    'loadMachine': GetCostOfLoad,
    'moveRobot': GetCostOfMove,
    'repair': 5,
    'wait': 1
}

DURATION.COUNTER = {
    'lookupDB': GetCostOfLookup,
    'wrap': GetCostOfWrap,
    'pickup': GetCostOfPickup,
    'putdown': GetCostOfPutdown,
    'acquireRobot': 1,
    'freeRobot': 1,
    'loadMachine': GetCostOfLoad,
    'moveRobot': GetCostOfMove,
    'repair': 5,
    'wait': 1
}

rv.LOCATIONS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 200]
rv.FACTORY1 = frozenset({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26})
rv.FACTORY_UNION = rv.FACTORY1
rv.SHIPPING_DOC = {rv.FACTORY1: 2}

rv.GROUND_EDGES = {0: [1, 6, 21, 2, 4, 5, 7, 10, 16, 18, 200], 1: [13, 0, 12], 2: [0, 11, 17, 20], 3: [14, 20, 24, 18], 4: [0, 8, 13], 5: [0], 6: [9, 0, 8], 7: [0, 15], 8: [4, 6, 13, 16, 17, 15], 9: [17, 6, 22, 23], 10: [0, 11, 13, 21], 11: [2, 10, 19], 12: [1, 17, 20, 21, 23], 13: [4, 10, 1, 8, 15, 21], 14: [18, 3], 15: [7, 8, 13, 18, 20], 16: [0, 8, 23], 17: [2, 24, 8, 9, 12], 18: [0, 3, 15, 14, 24, 26], 19: [26, 11, 23, 25], 20: [2, 15, 3, 12, 22], 21: [10, 13, 0, 12, 24], 22: [9, 20], 23: [9, 16, 19, 12], 24: [3, 18, 21, 17], 25: [19, 26], 26: [18, 25, 19], 200: [0]}
rv.GROUND_WEIGHTS = {(0, 1): 4.027559003234021, (0, 6): 3.9573025730726927, (0, 21): 6.470714327818221, (0, 2): 5.971999099270356, (0, 4): 4.312090718943287, (0, 5): 6.613554030631729, (0, 7): 6.7758018281124635, (0, 10): 8.697651367183127, (0, 16): 6.782997707912175, (0, 18): 8.747191550716563, (0, 200): 12.022702534271335, (1, 13): 10.78419111583452, (1, 12): 10.041472366062951, (2, 11): 10.377244320251876, (2, 17): 8.8224937335206, (2, 20): 7.615160062338801, (3, 14): 1.7934316409027264, (3, 20): 1.640916866199194, (3, 24): 15.963762041331785, (3, 18): 10.891472596999943, (4, 8): 7.6481067101051465, (4, 13): 11.917211530111057, (6, 9): 9.372139277027342, (6, 8): 13.520793183493332, (7, 15): 4.624520513864793, (8, 13): 4.901970187980531, (8, 16): 10.517318796880074, (8, 17): 9.584495078826444, (8, 15): 8.79063684417463, (9, 17): 13.319264745862641, (9, 22): 13.981704556454627, (9, 23): 11.315588417182184, (10, 11): 8.730014534631486, (10, 13): 9.738234525449068, (10, 21): 10.626810907883122, (11, 19): 3.9732868561033508, (12, 17): 4.0351102861018315, (12, 20): 1, (12, 21): 3.678308648922193, (12, 23): 6.567167557963964, (13, 15): 6.711420442496623, (13, 21): 13.322018562208882, (14, 18): 4.778239614848669, (15, 18): 8.84379822562735, (15, 20): 15.99331483376989, (16, 23): 7.508332855897761, (17, 24): 7.2320464272505305, (18, 24): 12.706210677869517, (18, 26): 8.128947627122773, (19, 26): 7.209340508731334, (19, 23): 10.463834623279753, (19, 25): 6.240638503152535, (20, 22): 9.267650641475761, (21, 24): 5.940774996922936, (25, 26): 12.632060345538992}

rv.ROBOTS = { 'r0': rv.FACTORY1,  'r1': rv.FACTORY1,  'r2': rv.FACTORY1,  'r3': rv.FACTORY1,  'r4': rv.FACTORY1,  'r5': rv.FACTORY1,  'r6': rv.FACTORY1,  'r7': rv.FACTORY1,  'r8': rv.FACTORY1,  'r9': rv.FACTORY1,  'r10': rv.FACTORY1,  'r11': rv.FACTORY1, }
rv.ROBOT_CAPACITY = {'r0': 8.211481363234373, 'r1': 9.810692585053904, 'r2': 8.459672614583354, 'r3': 3.96432615934231, 'r4': 8.85236258629513, 'r5': 8.008266558128726, 'r6': 9.992081962078469, 'r7': 7.8308783259929635, 'r8': 5.774769599934461, 'r9': 10.460277640024568, 'r10': 6.136357494954927, 'r11': 8.60663500109306}
rv.MACHINES = { 'm0': rv.FACTORY1, }
rv.REPAIR_BOT = { 'fixer0': rv.FACTORY1,  'fixer1': rv.FACTORY1, }

rv.OBJECTS = ['o0', 'o1', 'o2', 'o3', 'o4', 'o5', 'o6', 'o7', 'o8', 'o9', 'o10', 'o11', 'o12', 'o13', 'o14', 'o15', 'o16', 'o17', 'o18', 'o19', 'o20', 'o21', 'o22', 'o23', 'o24']
rv.OBJ_WEIGHT = {'o0': 7.209417046338136, 'o1': 7.803563939110596, 'o2': 9.441442243874565, 'o3': 9.950304781733033, 'o4': 8.37808562365058, 'o5': 8.092950436174739, 'o6': 5.013171834007942, 'o7': 10.460277640024568, 'o8': 5.808010784022842, 'o9': 7.802570297379519, 'o10': 9.380370430785073, 'o11': 7.047070660533939, 'o12': 7.4870942951842085, 'o13': 6.231539470678074, 'o14': 5.517478196420262, 'o15': 3.2560951358614254, 'o16': 4.301399457485337, 'o17': 8.774815387864832, 'o18': 5.610287594095681, 'o19': 8.089589802729604, 'o20': 6.908420482595737, 'o21': 7.175033205787747, 'o22': 7.633229311404264, 'o23': 4.84893505614335, 'o24': 4.110691507604688}
rv.OBJ_CLASS = {'type0': ['o0', 'o1', 'o2', 'o3'], 'type1': ['o4'], 'type2': ['o5', 'o6', 'o7', 'o8'], 'type3': ['o9', 'o10', 'o11'], 'type4': ['o12', 'o13', 'o14', 'o15', 'o16', 'o17'], 'type5': ['o18', 'o19', 'o20', 'o21', 'o22', 'o23', 'o24']}

def ResetState():
    state.loc = { 'r0': 18, 'r1': 19, 'r2': 7, 'r3': 1, 'r4': 13, 'r5': 26, 'r6': 26, 'r7': 17, 'r8': 9, 'r9': 0, 'r10': 16, 'r11': 1, 'm0': 6, 'fixer0': 21, 'fixer1': 26, 'o0': UNK, 'o1': UNK, 'o2': UNK, 'o3': UNK, 'o4': UNK, 'o5': UNK, 'o6': UNK, 'o7': UNK, 'o8': UNK, 'o9': UNK, 'o10': UNK, 'o11': UNK, 'o12': UNK, 'o13': UNK, 'o14': UNK, 'o15': UNK, 'o16': UNK, 'o17': UNK, 'o18': UNK, 'o19': UNK, 'o20': UNK, 'o21': UNK, 'o22': UNK, 'o23': UNK, 'o24': UNK,}
    state.storedLoc = {'o0': 17, 'o1': 19, 'o2': 12, 'o3': 15, 'o4': 13, 'o5': 5, 'o6': 6, 'o7': 8, 'o8': 7, 'o9': 18, 'o10': 9, 'o11': 19, 'o12': 18, 'o13': 26, 'o14': 0, 'o15': 9, 'o16': 18, 'o17': 1, 'o18': 23, 'o19': 17, 'o20': 5, 'o21': 18, 'o22': 3, 'o23': 5, 'o24': 0}
    state.load = { 'r0': NIL, 'r1': NIL, 'r2': NIL, 'r3': NIL, 'r4': NIL, 'r5': NIL, 'r6': NIL, 'r7': NIL, 'r8': NIL, 'r9': NIL, 'r10': NIL, 'r11': NIL, 'fixer0': False, 'fixer1': False,}
    state.busy = {'r0': False, 'r1': False, 'r2': False, 'r3': False, 'r4': False, 'r5': False, 'r6': False, 'r7': False, 'r8': False, 'r9': False, 'r10': False, 'r11': False, 'm0': False, 'fixer0': False, 'fixer1': False}
    state.numUses = {'m0': 11}
    state.var1 = {'temp': 'r0', 'temp1': 'r0', 'temp2': 1, 'redoId': 0}
    state.shouldRedo = {}

tasks = {
    4: [['order', 'type0', 200]],
    3: [['order', 'type0', 200]],
}
eventsEnv = {
}